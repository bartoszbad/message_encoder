import random
import re

TOKENIZE_RE = re.compile(r'(\w+)', re.U)
SEPARATOR = '-weird-'


def is_shuffleable(word):
    middle_letters = word[1:-1]
    if len(set(middle_letters)) >= 2:
        return True
    else:
        return False


def shuffle(word):
    word_list = list(word)
    char_list = word_list[:]
    shuffled = False

    """Checks if it is possible to shuffle word"""
    if len(set(char_list)) >= 2:
        shuffled = True
        while char_list == word_list:
            random.shuffle(word_list)

    encoded_word = ''.join(word_list)
    return encoded_word, shuffled


def encode_word(word):
    encoded = False
    if len(word) > 3:
        first_letter = word[0]
        last_letter = word[-1]
        middle_letters, encoded = shuffle(word[1:-1])
        return ''.join([first_letter, middle_letters, last_letter]), encoded
    return word, encoded


def encode_message(message):
    word_list = TOKENIZE_RE.split(message)
    result = []
    original_words = []
    for word in word_list:
        encoded_word, encoded = encode_word(word)
        result.append(encoded_word)
        if encoded is True:
            original_words.append(word)

    result = ''.join(result)
    original_words.sort(key=str.casefold)
    original_words = ' '.join(original_words)
    return ''.join([SEPARATOR, result, SEPARATOR, original_words])


def check_if_decoding_needed(word):
    if len(word) < 4:
        return False
    if is_shuffleable(word) is False:
        return False
    else:
        return True


def decode_message(message):
    if SEPARATOR not in message[0:12]:
        raise Exception('This is not a message generated by encoder!')
    message_wo_initial_separator = message[len(SEPARATOR):]
    second_separator_index = message_wo_initial_separator.find(SEPARATOR)
    message_to_decode = TOKENIZE_RE.split(message_wo_initial_separator[:second_separator_index])
    original_words = message_wo_initial_separator[second_separator_index + len(SEPARATOR):].split()
    answer = []
    for word in message_to_decode:
        if check_if_decoding_needed(word) is True:
            for original in original_words:
                if original[0] == word[0] and original[-1] == word[-1] and len(original) == len(word):
                    answer.append(original)
                    original_words.remove(original)
                    break
        else:
            answer.append(word)

    decoded = ''.join([str(elem) for elem in answer])
    return decoded
